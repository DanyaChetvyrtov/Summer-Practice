package ru.danil.algos.solution.task1;

/**
 * –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É
 * —á–∏—Å–ª—É, —Å–æ–æ–±—â–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º:
 * <ol>
 * <li>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ</li>
 * <li>—á–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ</li>
 * <li>–ø—Ä–æ—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ—Ç</li>
 * <li>–¥—Ä–æ–±–Ω–æ–µ –∏–ª–∏ –Ω–µ—Ç</li>
 * <li>–∫–≤–∞–¥—Ä–∞—Ç –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞</li>
 * <li>–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞</li>
 * </ol>
 * –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç "1", –≤ –∫–æ–Ω—Å–æ–ª–∏
 * –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ,
 * –Ω–µ—á–µ—Ç–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ–µ, –Ω–µ –¥—Ä–æ–±–Ω–æ–µ, –∫–≤–∞–¥—Ä–∞—Ç - 1, –∫–æ—Ä–µ–Ω—å - 1
 */

public final class NumberAnalyzer {
    private NumberAnalyzer() {
    }

    public static boolean isPositive(double number) {
        // maybe >= 0 ü§î
        return number > 0;
    }

    public static boolean isEven(double number) {
        return number % 2 == 0;
    }

    public static boolean isPrime(double number) {
        if (isFractional(number) || number <= 1) return false;

        for (int i = 2; i <= Math.sqrt(number); i++)
            if(number % i == 0) return false;

        return true;
    }

    public static boolean isFractional(double number) {
        return Math.floor(number) != number;
    }

    public static double getSquare(double number) {
        return Math.pow(number, 2);
    }

    public static Roots squareRoot(double number) {
        var root = Math.sqrt(number);
        return new Roots(root, -root);
    }
}
